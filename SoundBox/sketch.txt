/****** SOUNDBOX v1.0 ******/
/* To do:   [v] 0. State (Standby,Finding,Play)
            [x] 1. Autocalibration (with button input)
            [x] 2. LED color breathing / shift
            [v] 3. Randomize note location (sensor)
            [x] 4. Test BH1750 mode
            [x] 5. Check each box led pin
            [x] 6. Test baud rate to 115200 or 250000
            [x] 7. WS2811 data rate
            [v] 8. Button interrupt (pin 2,3)
            [x] 9. Blink when entering random state

    Notes:  memmove8()
    // Copy ten led colors from leds[src .. src+9] to leds[dest .. dest+9]
    memmove( &leds[dest], &leds[src], 10 * sizeof( CRGB) )
*/

#include <BH1750.h>
#include <FastLED.h>
#include <Wire.h>

/* Macro */
#define NUM_LEDS_PER_STRIP 36
#define DATA_PIN 3
#define NUM_STRIP 8
#define TCAADDR 0x70

/* Object Declaration */
BH1750 lightMeter;
CRGB leds[8][4];

/* Global Variable */
uint16_t LM[8];  // Lux value [0-7]
boolean LMx[8];  // Lux previous reading state
char note[8] = {'C', 'D', 'E', 'F', 'G', 'A', 'B', 'H'};
char noteRandom[8];
int treshold = 24;  // Lux treshold to trigger note sound
int i, j;
int state;
boolean staticled;
boolean randomized;

/* LED queue */
/* struct LEDQueue {
    CRGB LED[NUM_LEDS_PER_STRIP];
    int Head;
    int Tail;
}; */

/* I2C Multiplexer Selector */
void tcaselect(uint8_t i) {
    if (i > 7) return;
    Wire.beginTransmission(TCAADDR);
    Wire.write(1 << i);
    Wire.endTransmission();
}

/* Reading lux value of BH1750 */
void readLight() {
    for (i = 0; i < 8; i++) {
        Serial.print("L[");
        Serial.print(i);
        Serial.print("]: ");
        Serial.print(LM[i]);
        Serial.print(".");
        Serial.print(LMx[i]);
        Serial.print(" | ");
    }
    Serial.println("");
}

/* Lux Tresholding for Serial Print */
void serialNote(boolean random) {
    for (i = 0; i < 8; i++) {
        Serial.println("Serial note!");
        /* Multiplex */
        tcaselect(i);
        LM[i] = lightMeter.readLightLevel();

        /* Sensor treshold checking */
        if (LM[i] < treshold) {
            if (!LMx[i]) {
                LMx[i] = !LMx[i];

                /* Print note */
                /* if (random){
                    Serial.print("r");
                    Serial.println(noteRandom[i]); // Random
                }
                else{
                    Serial.print("nr");
                    Serial.println(note[i]);
                }    */                 
            }
        } else {
            LMx[i] = false;
        }
        delay(100);
    }
}

/* LED Color (needs rework) */
void shiftDynamicLED() {
    /* Traversal queue */
    Serial.println("ShiftDyn");
    for (i = 0; i <= NUM_STRIP; i++) {
        for (j = 0; j <= NUM_LEDS_PER_STRIP; j++) {
            /* ... */
        }
    }
    FastLED.show();
}

/* LED Color (needs rework) */
void shiftStaticLED() {
    /* Traversal queue */
    if (!staticled) {
        for (i = 0; i <= NUM_STRIP; i++) {
            for (j = 0; j <= NUM_LEDS_PER_STRIP; j++) {
                leds[i][j] = CRGB::Red;
            }
        }
        FastLED.show();
        staticled = true;
    }
}

/* Randomize Note */
void randomizeNote() {
    Serial.println("Randomize note!");
    int x;

    /* Isi dengan X */
    for (int i = 0; i <= 7; i++) {
        noteRandom[i] = 'X';
    }

    /* Isi dengan note */
    for (int i = 0; i <= 7; i++) {
        x = random(0, 7);
        while (noteRandom[x] != 'X') {
            x = (x + 1) % 8;
        }
        noteRandom[x] = note[i];
    }
}

/* Auto-Calibrate bottom and upper  */
void autoCalibrate() {
    /* ... */
}

/* Change State by interrupt button (2) */
void changeState() {
    Serial.println("Button Pressed!");
    state += 1;
    if (state > 3) {
        resetState();
    }
}

/* Reset state */
void resetState() {
    state = 0;
    for (i = 0; i < 8; i++) {
        LMx[i] = false;
    }
}

void setup() {
    /* Initialization */
    Serial.begin(57600);
    Wire.setClock(400000);
    Wire.begin();
    lightMeter.begin();
    //randomSeed(analogRead(A0));

    /* Interrupt */
    attachInterrupt(2, changeState, RISING);

    //Serial.println("Starting SOUNDBOX v1.0");

    /* WS2811 Setup */
    //Serial.print("Initializing WS2811 LED");
    FastLED.addLeds<WS2811, 3>(leds[0], NUM_LEDS_PER_STRIP);
    FastLED.addLeds<WS2811, 4>(leds[1], NUM_LEDS_PER_STRIP);
    FastLED.addLeds<WS2811, 5>(leds[2], NUM_LEDS_PER_STRIP);
    FastLED.addLeds<WS2811, 6>(leds[3], NUM_LEDS_PER_STRIP);
    FastLED.addLeds<WS2811, 7>(leds[4], NUM_LEDS_PER_STRIP);
    FastLED.addLeds<WS2811, 8>(leds[5], NUM_LEDS_PER_STRIP);
    FastLED.addLeds<WS2811, 9>(leds[6], NUM_LEDS_PER_STRIP);
    FastLED.addLeds<WS2811, 10>(leds[7], NUM_LEDS_PER_STRIP);
    FastLED.setBrightness(255);
    //Serial.println("Ready!");

    /* Variable and state initialization */
    resetState();
    randomized = false;
    staticled = false;
}

void loop() {
    readLight(); // Debugging
    Serial.print("State: ");
    Serial.println(state);

    if (state == 0) {
        /* Mode standby */
        Serial.println("STANDBY");
        shiftStaticLED();
    } else if (state == 1) {
        /* Mode random note */
        Serial.println("RANDOMIZED");
        if (!randomized) {
            //randomBlink();
            Serial.println("Randomizing");
            randomizeNote();
            randomized = true;
        }
        shiftDynamicLED();
        serialNote(1);
    } else if (state == 2) {
        /* Mode main lagu */
        Serial.println("PLAYING");
        shiftStaticLED();
        serialNote(0);
    } else {
        Serial.println("State Error!");
    }
    delay(100);
}